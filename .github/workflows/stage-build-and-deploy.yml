name: Build and Deploy (Stage)

on:
  push:
    branches:
      - '**'
    tags:
      - 'stage-*'

jobs:
  build:
    name: Build and Push ARM64 Docker Image to ECR
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch environment variables from SSM
        run: |
          PARAM_PREFIX="/mercantile/stage"
          for VAR in VITE_USER_EMAIL_TEMPLATE VITE_EMAIL_USER_ID VITE_EMAIL_TEMPLATE VITE_EMAIL_SERVICE_ID VITE_SUPABASE_API_KEY VITE_SUPABASE_URL ECR_REPOSITORY; do
            VALUE=$(aws ssm get-parameter --name "$PARAM_PREFIX/$VAR" --with-decryption --query "Parameter.Value" --output text)
            echo "$VAR=$VALUE" >> $GITHUB_ENV
            echo "$VAR=$VALUE" >> .env
          done

      - name: Set image tag to commit hash
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY

      - name: Build and push ARM64 Docker image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --build-arg VITE_USER_EMAIL_TEMPLATE=$VITE_USER_EMAIL_TEMPLATE \
            --build-arg VITE_EMAIL_USER_ID=$VITE_EMAIL_USER_ID \
            --build-arg VITE_EMAIL_TEMPLATE=$VITE_EMAIL_TEMPLATE \
            --build-arg VITE_EMAIL_SERVICE_ID=$VITE_EMAIL_SERVICE_ID \
            --build-arg VITE_SUPABASE_API_KEY=$VITE_SUPABASE_API_KEY \
            --build-arg VITE_SUPABASE_URL=$VITE_SUPABASE_URL \
            --tag $ECR_REPOSITORY:latest \
            --tag $ECR_REPOSITORY:$IMAGE_TAG \
            --file Dockerfile \
            --push .

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    env:
      AWS_REGION: eu-west-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Fetch deployment config from SSM
        run: |
          PARAM_PREFIX="/mercantile/stage"
          for VAR in ECR_REPOSITORY ECS_CLUSTER ECS_SERVICE ECS_TASK_DEFINITION CONTAINER_NAME; do
            VALUE=$(aws ssm get-parameter --name "$PARAM_PREFIX/$VAR" --with-decryption --query "Parameter.Value" --output text)
            echo "$VAR=$VALUE" >> $GITHUB_ENV
          done

      - name: Fetch current ECS task definition JSON
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --region $AWS_REGION > taskdef.json

      - name: Update task definition image
        run: |
          jq --arg image "$ECR_REPOSITORY:${GITHUB_SHA}" \
            '.taskDefinition |
            .containerDefinitions[0].image = $image |
            del(.status, .revision, .taskDefinitionArn, .compatibilities, .registeredAt, .registeredBy)' \
            taskdef.json > taskdef-updated.json

      - name: Register new task definition with updated image
        id: register-task-def
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://taskdef-updated.json > new-taskdef.json
          # Extract new task definition ARN
          NEW_TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' new-taskdef.json)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy updated task definition to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF_ARN \
            --region $AWS_REGION

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION

